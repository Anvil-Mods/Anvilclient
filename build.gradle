plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.5-SNAPSHOT" apply false
    id "com.diffplug.spotless" version "6.25.0"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.parchment_minecraft_version}:${rootProject.parchment_version}")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply plugin: "com.diffplug.spotless"

    archivesBaseName = rootProject.archives_base_name + "-" + rootProject.minecraft_version
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven { url 'https://maven.neoforged.net/releases/' }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }

    tasks.withType(ProcessResources).configureEach {
        var replaceProperties = [
                minecraft_version      : rootProject.minecraft_version,
                minecraft_version_range: rootProject.minecraft_version_range,
                neo_version            : rootProject.neo_version,
                neo_version_range      : rootProject.neo_version_range,
                loader_version_range   : rootProject.loader_version_range,
                mod_version            : rootProject.mod_version,
                architectury_version   : rootProject.architectury_version,
                architectury_next_api  : Integer.toString(Integer.parseInt(rootProject.architectury_version.split("\\.")[0]) + 1)
        ]
        inputs.properties replaceProperties

        filesMatching(['META-INF/mods.toml', 'fabric.mod.json']) {
            expand replaceProperties + [project: project]
        }
    }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }

    spotless {
        ratchetFrom 'origin/1.20.x'

        format 'misc', {
            target '*.gradle', '.gitattributes', '.gitignore'

            trimTrailingWhitespace()
            indentWithSpaces()
            endWithNewline()
        }
        java {
            licenseHeaderFile("${rootProject.projectDir}/.spotless/licenseHeader.txt")

            googleJavaFormat()
            formatAnnotations()
            removeUnusedImports()
            indentWithTabs(2)
        }
    }
}
